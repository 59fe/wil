#!/usr/bin/env node
'use strict';

const GC = require('../module/setGlobalConfig')
const repoPath = require('../module/getRepoPath')()
const qiniu = require("qiniu")
const path = require("path")
const program = require('commander')
const co = require("co")
const chalk = require("chalk")
const exec = require('child-process-promise').exec
const dive = require("../module/dive")
const getAkSk = require("../module/getAkSk.js")
const pushTag = require("../module/pushTag")

const deployDir = path.resolve(GC.deployDir)
program.parse(process.argv)

let gen = function* () {
  const execRet = yield exec('git remote get-url origin')
  // 得到项目git仓库名
  const repoName = path.basename(execRet.stdout).replace(/.git.*\n/, '')

  const AkSk = yield getAkSk()
  qiniu.conf.ACCESS_KEY = AkSk.ak
  qiniu.conf.SECRET_KEY = AkSk.sk
  console.dir(qiniu.conf);

  function uptoken(bucket, key) {
    let putPolicy = new qiniu.rs.PutPolicy(bucket+":"+key);
    return putPolicy.token();
  }
  function uploadFile(uptoken, key, localFile) {
    let extra = new qiniu.io.PutExtra()
    qiniu.io.putFile(uptoken, key, localFile, extra, function(err, ret) {
      if(!err) {
        let cdnUrl = path.join(GC.cdnHost, ret.key)
        // 上传成功， 处理返回值
        console.log(chalk.green('[SUCCESS] ') + chalk.cyan.underline(cdnUrl) + ' 发布成功！');
        //console.dir(ret.hash, ret.key, ret.persistentId);
      } else {
        // 上传失败， 处理返回代码
        console.log(chalk.red('[ERROR] ') + err);
      }
    });
  }

  // 打tag
  const tagName = program.args[0]
  if (typeof tagName == 'string' && tagName.length) {
    console.log(chalk.cyan('[INFO] ') + `git tag ${tagName}推送中... \n`);
    pushTag(tagName)
  }
  // 发布目录
  const deployDir = path.resolve(repoPath, GC.deployDir)
  dive(deployDir, (err, fullPath) => {
    const pathAfterDeployDir = fullPath.split(deployDir + '/')[1]
    // 七牛 key
    const key = path.join('repo', repoName, pathAfterDeployDir)

    let token = uptoken(GC.bucket, key)
    //调用uploadFile上传
    uploadFile(token, key, fullPath)
  })

}

co(gen)
